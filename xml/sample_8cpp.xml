<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sample_8cpp" kind="file" language="C++">
    <compoundname>sample.cpp</compoundname>
    <includes local="no">duinoPRO.h</includes>
    <includes refid="dn__time_8h" local="yes">../sm_qsl/dn_time.h</includes>
    <includes refid="globals_8h" local="yes">../globals.h</includes>
    <includes refid="sample_8h" local="yes">sample.h</includes>
    <includes refid="frame_8h" local="yes">frame.h</includes>
    <includes refid="sensor_8h" local="yes">sensor.h</includes>
    <incdepgraph>
      <node id="168">
        <label>stdbool.h</label>
      </node>
      <node id="164">
        <label>duinoPRO.h</label>
      </node>
      <node id="163">
        <label>C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp</label>
        <link refid="sample_8cpp"/>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="172">
        <label>stdint.h</label>
      </node>
      <node id="173">
        <label>dp_conf.h</label>
        <link refid="dp__conf_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>../globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>../sm_clib/dn_common.h</label>
        <link refid="dn__common_8h_source"/>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>sensor.h</label>
        <link refid="sensor_8h_source"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>sample.h</label>
        <link refid="sample_8h_source"/>
      </node>
      <node id="169">
        <label>string.h</label>
      </node>
      <node id="174">
        <label>sample/frame.h</label>
        <link refid="frame_8h_source"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="165">
        <label>../sm_qsl/dn_time.h</label>
        <link refid="dn__time_8h_source"/>
        <childnode refid="166" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>dp_sm.h</label>
        <link refid="dp__sm_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="sample_8cpp_1ab390d9357605e1f534edd5d1111aeaea" prot="public" static="no">
        <name>DP_SAM__TYPE_SENS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="12" column="9" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sample_8cpp_1af366ed45732f3c405cbe8ecc4e82cf0a" prot="public" static="no">
        <name>DP_SAM__TYPE_DIAG</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="13" column="9" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sample_8cpp_1aca38d14b4011649e3be4a69fcdbb326f" prot="public" static="no">
        <name>DP_SAM__TYPE_BOTH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="14" column="9" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sample_8cpp_1aaa6180ddd1d38a0647fe3f092ad434db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t sample</definition>
        <argsstring>(uint8_t sample_type)</argsstring>
        <name>sample</name>
        <param>
          <type>uint8_t</type>
          <defname>sample_type</defname>
        </param>
        <briefdescription>
<para>Fully prepares payload ready for push operation. </para>        </briefdescription>
        <detaileddescription>
<para>Loads required information into the dp_payload ready for sending. The system timestamp is always included as the first field in the payload. The remaining information to be loaded is specified by calling function:<orderedlist>
<listitem><para>sensor data only,</para></listitem><listitem><para>diagnostic data only, or</para></listitem><listitem><para>both.</para></listitem></orderedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of sample operation to perform (1, 2 or 3)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, 1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="16" column="1" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="16" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="sample_8cpp_1a14a33f73f2904424b208fc04bfd943c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sample_time</definition>
        <argsstring>(void)</argsstring>
        <name>sample_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sample current timestamp. </para>        </briefdescription>
        <detaileddescription>
<para>Reads and stores the current Dust Network time in the payload (global variabele) starting from the current position of the payload internal pointer.</para><para>The timestamp is a uint32_t natively. This is stored sequentially as four uint8_t entries in the payload. The most significant byte of the timestamp is stored first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="70" column="1" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="70" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="sample_8cpp_1af7457515038926f9fd2f5b0765577b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t sample_sensor</definition>
        <argsstring>()</argsstring>
        <name>sample_sensor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sample sensor data. </para>        </briefdescription>
        <detaileddescription>
<para>Reads and stores current sensor readings in the payload (global variable) starting from the current position of the payload internal pointer.</para><para>Support is provided throughout the duinoPRO-Dusty software for sensor data up to 16-bit resolution. The 16-bits for each sensor reading are stored as two uint8_t entries in the payload. The most significant byte of sensor data is stored first in the payload.</para><para><simplesect kind="return"><para>0 on success, 1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="94" column="1" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="94" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="sample_8cpp_1ac247786c48545fb376f6a9cc7665425b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t sample_diagnostic</definition>
        <argsstring>()</argsstring>
        <name>sample_diagnostic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sample diagnostic data. </para>        </briefdescription>
        <detaileddescription>
<para>Reads and stores the current battery voltage in the payload (global variable) starting from the current position of the payload internal pointer.</para><para>The duinoPRO battery voltage is measured using Board.getVbat(), which is defined in the duinoPRO library.</para><para>Battery voltage sensing is toggled on and off during the call to this function to minimise energy consumption.</para><para>The battery voltage is returned as a floating point number (32 bit). In the payload, this is stored as a series of four uint8_t numbers. This requires some additional re-assembly of the data at the network manager. As usual, the most significent byte is stored first in the payload.</para><para><simplesect kind="return"><para>0 on success, 1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" line="121" column="1" bodyfile="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp" bodystart="121" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>sample.cpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;duinoPRO.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>required<sp/>for<sp/>Vbat<sp/>querying*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sm_qsl/dn_time.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sample.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;frame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DP_SAM__TYPE_SENS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DP_SAM__TYPE_DIAG<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DP_SAM__TYPE_BOTH<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">uint8_t<sp/>sample(uint8_t<sp/>sample_type)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ret;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Flush<sp/>payload*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload_flush();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Input<sp/>validation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_type<sp/>!=<sp/>DP_SAM__TYPE_SENS<sp/>&amp;&amp;<sp/>sample_type<sp/>!=<sp/>DP_SAM__TYPE_DIAG<sp/>&amp;&amp;<sp/>sample_type<sp/>!=<sp/>DP_SAM__TYPE_BOTH)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Payload<sp/>type<sp/>and<sp/>initialise<sp/>pointer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[0]<sp/>=<sp/>DP_SAM__PAYL_TYPE_DATA;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Prepare<sp/>timestamp*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>sample_time();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Sensor<sp/>only*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_type<sp/>==<sp/>DP_SAM__TYPE_SENS)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sample_sensor();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Diagnostic<sp/>only*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_type<sp/>==<sp/>DP_SAM__TYPE_DIAG)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sample_diagnostic();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Sensor<sp/>&amp;<sp/>diagnostic*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_type<sp/>==<sp/>DP_SAM__TYPE_BOTH)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[1]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sample_sensor();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>sample_diagnostic();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>sample<sp/>function<sp/>return<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload_flush();<sp/></highlight><highlight class="comment">/*ensure<sp/>empty<sp/>payload<sp/>if<sp/>returning<sp/>failure*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>payload<sp/>length<sp/>not<sp/>exceeded*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref><sp/>&gt;<sp/>DP_SAM__LEN_PAYL_MAX)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Payload<sp/>ready<sp/>to<sp/>send*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1a0d10def95285245f3ec2bd75266240f9" kindref="member">_ready_send</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sample_time(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>tmp_ptr;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>time_val;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Reserve<sp/>field<sp/>in<sp/>payload<sp/>from<sp/>current<sp/>payload<sp/>pointer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ptr<sp/>=<sp/>reserve_field(DP_SAM__FIELD_TYPE_TIME,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DP_SAM__LEN_FIELD_VAL_TIME,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Get<sp/>timestamp*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>time_val<sp/>=<sp/>dn_time_ms();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>check<sp/>dn_time_ms<sp/>returns<sp/>successfully<sp/>before<sp/>storing<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Write<sp/>timestamp<sp/>to<sp/>payload,<sp/>MSB<sp/>first*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr]<sp/><sp/><sp/>=<sp/>(uint8_t)(time_val&gt;&gt;24);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+1]<sp/>=<sp/>(uint8_t)(time_val&gt;&gt;16);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+2]<sp/>=<sp/>(uint8_t)(time_val&gt;&gt;8);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+3]<sp/>=<sp/>(uint8_t)(time_val);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">uint8_t<sp/>sample_sensor()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>tmp_ptr,<sp/>ret;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>sens_data_buf[DP_SENS__OUTPUTS_MAX];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Reserve<sp/>field<sp/>in<sp/>payload<sp/>from<sp/>current<sp/>payload<sp/>pointer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ptr<sp/>=<sp/>reserve_field(DP_SAM__FIELD_TYPE_SENS,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemState._sensor_n_outputs*DP_SENS__RESOLUTION_MAX,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>]);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Get<sp/>sensor<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sensor_read(sens_data_buf,<sp/>2*DP_SENS__OUTPUTS_MAX);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Write<sp/>sensor<sp/>data<sp/>to<sp/>payload,<sp/>MSB<sp/>first*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SystemState._sensor_n_outputs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+2*i]<sp/><sp/><sp/>=<sp/>(uint8_t)(sens_data_buf[i]&gt;&gt;8);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+2*i+1]<sp/>=<sp/>(uint8_t)(sens_data_buf[i]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">uint8_t<sp/>sample_diagnostic()</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>tmp_ptr;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Vbat_bits;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Vbat;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Reserve<sp/>field<sp/>in<sp/>payload<sp/>from<sp/>current<sp/>payload<sp/>pointer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ptr<sp/>=<sp/>reserve_field(DP_SAM__FIELD_TYPE_DIAG,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DP_SAM__LEN_FIELD_VAL_DIAG,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[dp_payload.<ref refid="structdp__payload__t_1a6bf18d2f0973bca55f8667a348857a4a" kindref="member">_payload_ptr</ref>]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Get<sp/>Vbat*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>Board.enableVbatSense(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>Vbat<sp/>=<sp/>Board.getVbat();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Board.enableVbatSense(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Copy<sp/>bits<sp/>of<sp/>Vbat<sp/>to<sp/>a<sp/>32<sp/>bit<sp/>variable*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;Vbat_bits,<sp/>&amp;Vbat,<sp/>DP_SAM__LEN_FIELD_VAL_DIAG);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Write<sp/>bits<sp/>of<sp/>Vbat<sp/>to<sp/>payload,<sp/>MSB<sp/>first*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr]<sp/><sp/><sp/>=<sp/>(uint8_t)(Vbat_bits&gt;&gt;24);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+1]<sp/>=<sp/>(uint8_t)(Vbat_bits&gt;&gt;16);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+2]<sp/>=<sp/>(uint8_t)(Vbat_bits&gt;&gt;8);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>dp_payload.<ref refid="structdp__payload__t_1af2e6ae18679b80a064d14df6fc7f72bc" kindref="member">payload</ref>[tmp_ptr+3]<sp/>=<sp/>(uint8_t)(Vbat_bits);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/kjph/Documents/JSITE-M1/2_work/10_uwa/1_units/ELEC5552_Design2/5_repos/DustyDuinoPro/projects/C7C.Atamo.Dusty.Mote_0_0_2/C7C.Atamo.Dusty.Mote/main/sample/sample.cpp"/>
  </compounddef>
</doxygen>
